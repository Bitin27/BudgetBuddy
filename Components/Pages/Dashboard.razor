@using System.Linq
@using BudgetBuddy.Services
@page "/dashboard"

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
        border: 3px solid #000;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .chart-title {
        text-align: center;
        font-size: 1.5rem;
        margin-bottom: 15px;
    }

    .legend-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 15px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .legend-color {
        width: 15px;
        height: 15px;
        border-radius: 50%;
    }

    .legend-text {
        font-size: 0.9rem;
    }

    .table-container {
        margin-top: 20px;
    }

    .date-range-filter {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

        .date-range-filter input {
            width: 200px;
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .date-range-filter button {
            padding: 7px 15px;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }

            .date-range-filter button.clear-btn {
                background-color: #f44336;
            }

            .date-range-filter button:hover {
                background-color: #45a049;
            }

            .date-range-filter button.clear-btn:hover {
                background-color: #e53935;
            }
</style>

<div class="container mt-4">
    <h3 style="color:green">Dashboard</h3>

    <!-- Date Range Filter -->
    <div class="date-range-filter">
        <div>
            <label for="startDate">Start Date</label>
            <input type="date" id="startDate" @bind="startDate" />
        </div>
        <div>
            <label for="endDate">End Date</label>
            <input type="date" id="endDate" @bind="endDate" />
        </div>
        <button @onclick="FilterData">Filter</button>
        <button class="clear-btn" @onclick="ClearFilter">Clear</button>
    </div>

    <!-- Dashboard Cards -->
    <div class="row">
        <div class="col-md-3">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@totalExpense</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Unpaid Debt</h5>
                <h2>@totalDebt</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card bg-primary text-white text-center">
                <h5>Total Balance</h5>
                <h2>@totalBalance</h2>
            </div>
        </div>
        <!-- Paid Debt Card -->
        <div class="col-md-3">
            <div class="dashboard-card bg-info text-white text-center">
                <h5>Total Paid Debts</h5>
                <h2>@totalPaidDebt</h2>
            </div>
        </div>
    </div>

    <!-- Financial Overview Chart -->
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="chart-title">Financial Overview</div>
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Pie" InputData="@chartData" InputLabels="@chartLabels" Width="100%" Height="300px" Colors="@chartColors" />
            </MudPaper>

            <div class="legend-container">
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #4CAF50;"></div>
                    <div class="legend-text">Income</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #F44336;"></div>
                    <div class="legend-text">Expense</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #FF9800;"></div>
                    <div class="legend-text">Debt</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #2196F3;"></div>
                    <div class="legend-text">Balance</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #00BCD4;"></div>
                    <div class="legend-text">Paid Debt</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Inflow Table -->
    <div class="table-container">
        <h5>Inflow Records</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Notes</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @if (inflows != null && inflows.Any())
                {
                    @foreach (var transaction in inflows)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Notes</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td class="text-success">@transaction.Type</td>
                            <td>@(string.IsNullOrEmpty(transaction.Category) ? "Uncategorized" : transaction.Category)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center">No inflow records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Outflow Table -->
    <div class="table-container">
        <h5>Outflow Records</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Notes</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @if (outflows != null && outflows.Any())
                {
                    @foreach (var transaction in outflows)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Notes</td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td class="text-danger">@transaction.Type</td>
                            <td>@(string.IsNullOrEmpty(transaction.Category) ? "Uncategorized" : transaction.Category)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center">No outflow records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Unpaid Debt Table -->
    <div class="table-container">
        <h5>Unpaid Debt Records</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Due Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @if (pendingDebts != null && pendingDebts.Any())
                {
                    @foreach (var debt in pendingDebts)
                    {
                        <tr>
                            <td>@debt.Description</td>
                            <td>@debt.Amount.ToString("C")</td>
                            <td>@debt.DueDate.ToShortDateString()</td>
                            <td class="text-warning">Unpaid</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center">No unpaid debt records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Paid Debt Table (No Paid Date column) -->
    <div class="table-container">
        <h5>Paid Debt Records</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @if (paidDebts != null && paidDebts.Any())
                {
                    @foreach (var debt in paidDebts)
                    {
                        <tr>
                            <td>@debt.Description</td>
                            <td>@debt.Amount.ToString("C")</td>
                            <td class="text-success">Paid</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No paid debt records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

@code {
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal totalBalance;
    private decimal totalPaidDebt;

    private double[] chartData;
    private string[] chartLabels = { "Income", "Expense", "Debt", "Balance", "Paid Debt" };
    private string[] chartColors = { "#4CAF50", "#F44336", "#FF9800", "#2196F3", "#00BCD4" };

    private List<DebtRecord> pendingDebts = new();
    private List<DebtRecord> paidDebts = new();
    private List<FinancialTransaction> inflows = new();
    private List<FinancialTransaction> outflows = new();

    private DateTime? startDate;
    private DateTime? endDate;

    [Inject]
    private TransactionService TransService { get; set; }

    [Inject]
    private DebtService DebtService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchFinancialData();
        await LoadPendingDebtRecords();
        await LoadPaidDebtRecords();
        await LoadTransactions();
        UpdateChartData();
    }

    private async Task FetchFinancialData()
    {
        totalIncome = await TransService.GetTotalIncomeAsync();
        totalExpense = await TransService.GetTotalExpenseAsync();
        totalDebt = await DebtService.GetTotalDebtAsync();
        totalPaidDebt = await DebtService.GetTotalPaidDebtAsync();
        totalBalance = totalIncome + totalDebt - totalExpense;
    }

    private async Task LoadPendingDebtRecords()
    {
        pendingDebts = await DebtService.GetUnpaidDebtsAsync();
    }

    private async Task LoadPaidDebtRecords()
    {
        paidDebts = await DebtService.GetpaidDebtsAsync();
    }

    private async Task LoadTransactions()
    {
        var transactions = await TransService.GetTransactionsAsync();
        inflows = transactions.Where(t => t.Type == "Income").ToList();
        outflows = transactions.Where(t => t.Type == "Expense").ToList();
    }

    private void UpdateCardValues()
    {
        totalIncome = inflows.Sum(t => t.Amount);
        totalExpense = outflows.Sum(t => t.Amount);
        totalDebt = pendingDebts.Sum(d => d.Amount);
        totalPaidDebt = paidDebts.Sum(d => d.Amount);
        totalBalance = totalIncome + totalDebt - totalExpense;
    }

    private void UpdateChartData()
    {
        chartData = new double[] {
            (double)totalIncome,
            (double)totalExpense,
            (double)totalDebt,
            (double)totalBalance,
            (double)totalPaidDebt
    };
    }

    private void FilterData()
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            inflows = inflows.Where(t => t.Date >= startDate && t.Date <= endDate).ToList();
            outflows = outflows.Where(t => t.Date >= startDate && t.Date <= endDate).ToList();
            pendingDebts = pendingDebts.Where(d => d.DueDate >= startDate && d.DueDate <= endDate).ToList();
            UpdateCardValues();
            UpdateChartData();
        }
    }

    private void ClearFilter()
    {
        startDate = null;
        endDate = null;
        LoadTransactions();
        LoadPendingDebtRecords();
        LoadPaidDebtRecords();
        UpdateCardValues();
        UpdateChartData();
    }
}
