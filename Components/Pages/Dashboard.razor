@page "/dashboard"

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
        border: 3px solid #000;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .chart-title {
        text-align: center;
        font-size: 1.5rem;
        margin-bottom: 15px;
    }

    .legend-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 15px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .legend-color {
        width: 15px;
        height: 15px;
        border-radius: 50%;
    }

    .legend-text {
        font-size: 0.9rem;
    }
</style>

<div class="container mt-4">
    <h3 style="color:green">Dashboard</h3>

    <div class="row">
        <div class="col-md-3">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@totalExpense</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h2>@totalDebt</h2>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card bg-primary text-white text-center">
                <h5>Total Balance</h5>
                <h2>@totalBalance</h2>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <div class="chart-title">Financial Overview</div>
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Pie" InputData="@chartData" InputLabels="@chartLabels" Width="100%" Height="300px" Colors="@chartColors" />
            </MudPaper>

            <div class="legend-container">
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #4CAF50;"></div>
                    <div class="legend-text">Income</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #F44336;"></div>
                    <div class="legend-text">Expense</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #FF9800;"></div>
                    <div class="legend-text">Debt</div>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #2196F3;"></div>
                    <div class="legend-text">Balance</div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal totalBalance;

    private double[] chartData;
    private string[] chartLabels = { "Income", "Expense", "Debt", "Balance" };
    private string[] chartColors = { "#4CAF50", "#F44336", "#FF9800", "#2196F3" }; // Blue, Green, Red, Purple

    private List<Transaction> transactions = new List<Transaction>
    {
        new Transaction { Description = "Grocery Shopping", Date = DateTime.Parse("2024-12-25"), Amount = 1000, Type = "Expense" },
        new Transaction { Description = "Freelance Payment", Date = DateTime.Parse("2024-12-24"), Amount = 5000, Type = "Income" },
        new Transaction { Description = "Borrowed from Someone", Date = DateTime.Parse("2024-12-22"), Amount = 3000, Type = "Debt" }
    };

    protected override void OnInitialized()
    {
        CalculateTotals();
        UpdateChartData();
    }

    private void CalculateTotals()
    {
        totalIncome = transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
        totalExpense = transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
        totalDebt = transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        totalBalance = totalIncome + totalDebt - totalExpense;
    }

    private void UpdateChartData()
    {
        chartData = new double[]
        {
            (double)totalIncome,
            (double)totalExpense,
            (double)totalDebt,
            (double)totalBalance
        };
    }

    public class Transaction
    {
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; } // Income, Expense, Debt
    }
}
