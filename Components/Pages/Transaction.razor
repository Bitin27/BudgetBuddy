@page "/transaction"

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f0f4f8;
        color: #333;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .dashboard-header h1 {
            font-size: 2rem;
            color: #007bff;
        }

    .btn-primary {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-outline-primary {
        border: 1px solid #007bff;
        color: #007bff;
        padding: 8px 16px;
        border-radius: 5px;
        transition: 0.3s ease;
    }

        .btn-outline-primary:hover {
            background-color: #007bff;
            color: white;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

        .table th,
        .table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }

        .table tbody tr:hover {
            background-color: #f1f9ff;
        }

    .modal-header,
    .modal-footer {
        background-color: #f0f4f8;
    }

        .modal-header h5 {
            color: #007bff;
        }

    .form-control {
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }

        .transaction-item span {
            font-weight: 500;
        }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

        .action-buttons button {
            padding: 6px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

    .btn-edit {
        background-color: darkgreen;
        color: white;
    }

        .btn-edit:hover {
            background-color: #e0a800;
        }

    .btn-delete {
        background-color: red;
        color: white;
    }

        .btn-delete:hover {
            background-color: #bd2130;
        }
</style>

<div class="dashboard-header">
    <h1>Transaction Management</h1>
    <div>
        <button class="btn btn-primary" @onclick="OpenCategoryModal">Add Category</button>
        <button class="btn btn-primary" @onclick="OpenTransactionModal">Add Transaction</button>
    </div>
</div>

<!-- Search Section -->
<div class="d-flex mb-4">
    <input type="text" class="form-control me-2" placeholder="Search by Description" @bind="searchQuery" />
    <select class="form-control me-2" @bind="selectedCategory">
        <option value="">Select Category</option>
        @foreach (var category in categories)
        {
            <option value="@category.Name">@category.Name</option>
        }
    </select>
    <input type="date" class="form-control me-2" @bind="selectedDate" />
    <button class="btn btn-outline-primary" @onclick="SearchTransactions">Search</button>
</div>

<!-- Transactions Table -->
<table class="table">
    <thead>
        <tr>
            <th>Transaction Date</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Description</th>
            <th>Category</th> <!-- Added Category Column -->
            <th>From</th>
            <th>To</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</td>
                <td>@transaction.Amount.ToString("C")</td>
                <td>@transaction.Description</td>
                <td>@transaction.Category</td> <!-- Display Category -->
                <td>@transaction.From</td>
                <td>@transaction.To</td>
                <td class="action-buttons">
                    <button class="btn-edit" @onclick="() => EditTransaction(transaction)">Edit</button>
                    <button class="btn-delete" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Add/Edit Transaction Modal -->
@if (showTransactionModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditing ? "Edit" : "Add") + " Transaction")</h5>
                    <button type="button" class="btn-close" @onclick="CloseTransactionModal"></button>
                </div>
                <div class="modal-body">
                    <label>Transaction Date</label>
                    <input type="date" class="form-control" @bind="transactionModel.Date" />

                    <label>Type</label>
                    <select class="form-control" @bind="transactionModel.Type">
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                    </select>

                    <label>Amount</label>
                    <input type="number" class="form-control" @bind="transactionModel.Amount" />

                    <label>Description</label>
                    <input type="text" class="form-control" @bind="transactionModel.Description" />

                    <label>Category</label> <!-- Dropdown for Category -->
                    <select class="form-control" @bind="transactionModel.Category">
                        <option value="">Select Category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Name">@category.Name</option>
                        }
                    </select>

                    <label>From</label>
                    <input type="text" class="form-control" @bind="transactionModel.From" />

                    <label>To</label>
                    <input type="text" class="form-control" @bind="transactionModel.To" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseTransactionModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTransaction">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Add Category Modal -->
@if (showCategoryModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Category</h5>
                    <button type="button" class="btn-close" @onclick="CloseCategoryModal"></button>
                </div>
                <div class="modal-body">
                    <label>Category Name</label>
                    <input type="text" class="form-control" @bind="categoryModel.Name" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCategoryModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCategory">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool showTransactionModal = false;
    private bool showCategoryModal = false;
    private bool isEditing = false;
    private string searchQuery = string.Empty;
    private string selectedCategory = string.Empty;
    private DateTime? selectedDate = null;

    public class FinancialTransaction
    {
        public DateTime Date { get; set; }
        public string Type { get; set; }
        public decimal Amount { get; set; }
        public string Description { get; set; }
        public string Category { get; set; } // Added Category property
        public string From { get; set; }
        public string To { get; set; }
    }

    public class Category
    {
        public string Name { get; set; }
    }

    private FinancialTransaction transactionModel = new();
    private Category categoryModel = new();
    private List<FinancialTransaction> transactions = new();
    private List<FinancialTransaction> filteredTransactions = new();
    private List<Category> categories = new();

    protected override void OnInitialized()
    {
        categories = new List<Category>
        {
            new() { Name = "Business" },
            new() { Name = "Personal" },
        };

        transactions = new List<FinancialTransaction>
        {
            new() { Date = DateTime.Now.AddDays(-1), Type = "Income", Amount = 100, Description = "Project A", From = "Client A", To = "My Account", Category = "Business" },
            new() { Date = DateTime.Now.AddDays(-2), Type = "Expense", Amount = 50, Description = "Groceries", From = "My Account", To = "Grocery Store", Category = "Personal" },
        };
        filteredTransactions = transactions;
    }

    private void OpenTransactionModal()
    {
        transactionModel = new FinancialTransaction { Date = DateTime.Now };
        isEditing = false;
        showTransactionModal = true;
    }

    private void OpenCategoryModal()
    {
        categoryModel = new Category();
        showCategoryModal = true;
    }

    private void SaveTransaction()
    {
        if (!isEditing)
        {
            transactions.Add(transactionModel);
        }
        filteredTransactions = transactions;
        CloseTransactionModal();
    }

    private void SaveCategory()
    {
        categories.Add(categoryModel);
        CloseCategoryModal();
    }

    private void CloseTransactionModal()
    {
        showTransactionModal = false;
    }

    private void CloseCategoryModal()
    {
        showCategoryModal = false;
    }

    private void EditTransaction(FinancialTransaction transaction)
    {
        transactionModel = transaction;
        isEditing = true;
        showTransactionModal = true;
    }

    private void DeleteTransaction(FinancialTransaction transaction)
    {
        transactions.Remove(transaction);
        filteredTransactions = transactions;
    }

    private void SearchTransactions()
    {
        filteredTransactions = transactions
            .Where(t => (string.IsNullOrEmpty(searchQuery) || t.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrEmpty(selectedCategory) || t.Category == selectedCategory) &&
                        (!selectedDate.HasValue || t.Date.Date == selectedDate.Value.Date))
            .ToList();
    }
}
