@page "/debt"

@inject DebtService debtService

<style>
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

    .btn {
        border-radius: 8px;
    }

    .debt-table th {
        background-color: #f8f9fa;
    }

    .debt-table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 450px;
    }

    .modal-footer {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    .filter-section {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

        .filter-section .form-group {
            flex: 1;
            min-width: 200px;
        }
</style>

<div class="dashboard-header">
    <h2>Debt Management</h2>
    <button class="btn btn-primary" @onclick="OpenDebtModal">Add Debt</button>
</div>

<!-- Highest/Lowest Debt Filters -->
<div class="dashboard-header">
    <div class="stats-container">
        <button class="btn btn-info" @onclick="ToggleHighestDebts">Highest Debt</button>
        <button class="btn btn-info" @onclick="ToggleLowestDebts">Lowest Debt</button>
    </div>
</div>

<!-- Filter Section -->
<div class="filter-section">
    <div class="form-group">
        <label for="filterDescription">Description</label>
        <input id="filterDescription" type="text" class="form-control" placeholder="Description" @bind="filterDescription" />
    </div>
    <div class="form-group">
        <label for="filterCategory">Category</label>
        <input id="filterCategory" type="text" class="form-control" placeholder="Category" @bind="filterCategory" />
    </div>
    <div class="form-group">
        <label for="filterStartDate">Start Date</label>
        <input id="filterStartDate" type="date" class="form-control" @bind="filterStartDate" />
    </div>
    <div class="form-group">
        <label for="filterEndDate">End Date</label>
        <input id="filterEndDate" type="date" class="form-control" @bind="filterEndDate" />
    </div>
    <button class="btn btn-primary" @onclick="ApplyFilters">Filter</button>
    <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
</div>

<!-- Debt Table -->
<table class="table debt-table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Amount</th>
            <th>Category</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in filteredDebts)
        {
            <tr>
                <td>@debt.Description</td>
                <td>@debt.Amount.ToString("C")</td>
                <td>@debt.Category</td>
                <td>@debt.DueDate.ToString("MM/dd/yyyy")</td>
                <td>@(debt.IsPaid ? "Paid" : "Unpaid")</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => OpenEditModal(debt)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteDebt(debt)">Delete</button>
                    <button class="btn btn-success" @onclick="() => TogglePaidStatus(debt)">
                        @(debt.IsPaid ? "Mark Unpaid" : "Mark Paid")
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal for Adding/Editing Debt -->
@if (showDebtModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>@modalTitle</h2>

            <!-- Form Fields -->
            <div class="form-group">
                <label for="description">Description</label>
                <input id="description" type="text" class="form-control" placeholder="Description" @bind="currentDebt.Description" />
            </div>

            <div class="form-group">
                <label for="amount">Amount</label>
                <input id="amount" type="number" class="form-control" placeholder="Amount" @bind="currentDebt.Amount" />
            </div>

            <div class="form-group">
                <label for="category">Category</label>
                <input id="category" type="text" class="form-control" placeholder="Category" @bind="currentDebt.Category" />
            </div>

            <div class="form-group">
                <label for="dueDate">Due Date</label>
                <input id="dueDate" type="date" class="form-control" @bind="currentDebt.DueDate" />
            </div>

            @if (modalTitle != "Edit Debt")
            {
                <div class="form-group">
                    <label for="isPaid">Status</label>
                    <select id="isPaid" class="form-control" @bind="currentDebt.IsPaid">
                        <option value="false">Unpaid</option>
                        <option value="true">Paid</option>
                    </select>
                </div>
            }

            <!-- Action Buttons -->
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseDebtModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveDebt">Save</button>
            </div>
        </div>
    </div>
}

@code {
    private List<DebtRecord> debts = new();
    private List<DebtRecord> filteredDebts = new();
    private DebtRecord currentDebt = new();
    private bool showDebtModal = false;
    private string modalTitle = "Add Debt";

    private string filterDescription = string.Empty;
    private string filterCategory = string.Empty;
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;

    private bool showTopDebts = false;
    private string topDebtsTitle = string.Empty;
    private List<DebtRecord> topDebts = new();

    protected override async Task OnInitializedAsync()
    {
        debts = await debtService.GetAllDebtsAsync();
        filteredDebts = new List<DebtRecord>(debts);
    }

    private void ApplyFilters()
    {
        filteredDebts = debts
            .Where(d =>
                (string.IsNullOrEmpty(filterDescription) || d.Description.Contains(filterDescription, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterCategory) || d.Category.Contains(filterCategory, StringComparison.OrdinalIgnoreCase)) &&
                (!filterStartDate.HasValue || d.DueDate >= filterStartDate.Value) &&
                (!filterEndDate.HasValue || d.DueDate <= filterEndDate.Value))
            .ToList();
    }

    private async Task ClearFilters()
    {
        filterDescription = string.Empty;
        filterCategory = string.Empty;
        filterStartDate = null;
        filterEndDate = null;

        debts = await debtService.GetAllDebtsAsync();
        filteredDebts = new List<DebtRecord>(debts);
    }

    private void OpenDebtModal()
    {
        currentDebt = new DebtRecord { DueDate = DateTime.Now, IsPaid = false };
        modalTitle = "Add Debt";
        showDebtModal = true;
    }

    private void OpenEditModal(DebtRecord debt)
    {
        currentDebt = new DebtRecord
            {
                Id = debt.Id,
                Description = debt.Description,
                Amount = debt.Amount,
                Category = debt.Category,
                DueDate = debt.DueDate
            };
        modalTitle = "Edit Debt";
        showDebtModal = true;
    }

    private async Task SaveDebt()
    {
        if (modalTitle == "Add Debt")
        {
            currentDebt.Id = Guid.NewGuid();
            await debtService.AddDebtAsync(currentDebt);
        }
        else
        {
            await debtService.EditDebtAsync(currentDebt);
        }

        debts = await debtService.GetAllDebtsAsync();
        filteredDebts = new List<DebtRecord>(debts);
        CloseDebtModal();
    }

    private async Task DeleteDebt(DebtRecord debt)
    {
        await debtService.DeleteDebtAsync(debt.Id);

        debts = await debtService.GetAllDebtsAsync();
        filteredDebts = new List<DebtRecord>(debts);
    }

    private async Task TogglePaidStatus(DebtRecord debt)
    {
        debt.IsPaid = !debt.IsPaid;
        await debtService.EditDebtAsync(debt);

        debts = await debtService.GetAllDebtsAsync();
        filteredDebts = new List<DebtRecord>(debts);
    }

    private void CloseDebtModal()
    {
        showDebtModal = false;
    }

    private void ToggleHighestDebts()
    {
        showTopDebts = true;
        topDebtsTitle = "Highest Debts";
        topDebts = debts.OrderByDescending(d => d.Amount).Take(5).ToList();
        filteredDebts = topDebts;
    }

    private void ToggleLowestDebts()
    {
        showTopDebts = true;
        topDebtsTitle = "Lowest Debts";
        topDebts = debts.OrderBy(d => d.Amount).Take(5).ToList();
        filteredDebts = topDebts;
    }
}
